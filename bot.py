import json
import os
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import Channel
from config import API_ID, API_HASH, SESSION_NAME, DATA_DIR

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

broadcasts = {}

# ===== Helpers =====
def save_broadcast(code):
    path = f"{DATA_DIR}/{code}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(broadcasts[code], f, ensure_ascii=False, indent=2)

def load_broadcasts():
    for file in os.listdir(DATA_DIR):
        if file.endswith(".json"):
            with open(f"{DATA_DIR}/{file}", "r", encoding="utf-8") as f:
                code = file.replace(".json", "")
                broadcasts[code] = json.load(f)

async def send_broadcast(code):
    data = broadcasts.get(code)
    if not data:
        return
    data["running"] = True
    save_broadcast(code)

    # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    tasks = []

    while data["running"]:
        for chat in data["chats"]:
            for msg in data["messages"]:
                task = asyncio.create_task(send_message_to_chat(chat, msg, code))
                tasks.append(task)

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            await asyncio.gather(*tasks)

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
        interval = data["interval"]
        await asyncio.sleep(interval)

async def send_message_to_chat(chat, msg, code):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        response = await client.send_message(chat["chat"], msg, reply_to=chat.get("topic_id"))
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat['chat']}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        log_send_status(code, chat["chat"], "sent")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        print(f"‚ùó–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat['chat']}: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        log_send_status(code, chat["chat"], "failed")

def log_send_status(code, chat, status):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if "send_status" not in broadcasts[code]:
        broadcasts[code]["send_status"] = {}
    if chat not in broadcasts[code]["send_status"]:
        broadcasts[code]["send_status"][chat] = []
    broadcasts[code]["send_status"][chat].append(status)
    save_broadcast(code)

# ===== Commands =====
@client.on(events.NewMessage(pattern=r'\.b a (\w+)'))
async def add_message(event):
    code = event.pattern_match.group(1)
    if not event.is_reply:
        return await event.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    broadcasts.setdefault(code, {"messages": [], "chats": [], "interval": 60, "running": False})
    msg = (await event.get_reply_message()).text
    if msg:
        broadcasts[code]["messages"].append(msg)
        save_broadcast(code)
        await event.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {code}")

@client.on(events.NewMessage(pattern=r'\.b r (\w+)'))
async def remove_message(event):
    code = event.pattern_match.group(1)
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    if not event.is_reply:
        return await event.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    msg = (await event.get_reply_message()).text
    if msg in broadcasts[code]["messages"]:
        broadcasts[code]["messages"].remove(msg)
        save_broadcast(code)
        await event.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ {code}")

@client.on(events.NewMessage(pattern=r'\.b ac (\w+) (@\w+)(?: (\d+))?'))
async def add_chat(event):
    code, chat, topic = event.pattern_match.groups()
    broadcasts.setdefault(code, {"messages": [], "chats": [], "interval": 60, "running": False})
    chats = broadcasts[code]["chats"]
    if any(c["chat"] == chat for c in chats):
        return await event.reply(f"‚ùó{chat} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
    chat_data = {"chat": chat}
    if topic:
        chat_data["topic_id"] = int(topic)
    chats.append(chat_data)
    save_broadcast(code)
    await event.reply(f"‚úÖ –ß–∞—Ç {chat} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {code}")

@client.on(events.NewMessage(pattern=r'\.b rc (\w+) (@\w+)'))
async def remove_chat(event):
    code, chat = event.pattern_match.groups()
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    before = len(broadcasts[code]["chats"])
    broadcasts[code]["chats"] = [c for c in broadcasts[code]["chats"] if c["chat"] != chat]
    after = len(broadcasts[code]["chats"])
    save_broadcast(code)
    await event.reply(f"‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω ({before} ‚Üí {after})")

@client.on(events.NewMessage(pattern=r'\.b i (\w+) (\d+) (\d+)'))
async def set_interval(event):
    code, min_sec, max_sec = event.pattern_match.groups()
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    interval = (int(min_sec) + int(max_sec)) // 2
    broadcasts[code]["interval"] = interval * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    save_broadcast(code)
    await event.reply(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª {min_sec}-{max_sec} –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@client.on(events.NewMessage(pattern=r'\.b s (\w+)'))
async def start_broadcast(event):
    code = event.pattern_match.group(1)
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    if broadcasts[code]["running"]:
        return await event.reply("‚ùó–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
    asyncio.create_task(send_broadcast(code))
    await event.reply(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ {code} –∑–∞–ø—É—â–µ–Ω–∞")

@client.on(events.NewMessage(pattern=r'\.b x (\w+)'))
async def stop_broadcast(event):
    code = event.pattern_match.group(1)
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    broadcasts[code]["running"] = False
    save_broadcast(code)
    await event.reply(f"üõë –†–∞—Å—Å—ã–ª–∫–∞ {code} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

@client.on(events.NewMessage(pattern=r'\.b d (\w+)'))
async def delete_broadcast(event):
    code = event.pattern_match.group(1)
    if code in broadcasts:
        os.remove(f"{DATA_DIR}/{code}.json")
        del broadcasts[code]
        await event.reply(f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ {code} —É–¥–∞–ª–µ–Ω–∞")
    else:
        await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")

@client.on(events.NewMessage(pattern=r'\.b l'))
async def list_broadcasts(event):
    if not broadcasts:
        return await event.reply("üì≠ –ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫")
    text = "üìÑ –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
    for code, data in broadcasts.items():
        text += f"üîπ {code} | —Å–æ–æ–±—â–µ–Ω–∏–π: {len(data['messages'])} | —á–∞—Ç–æ–≤: {len(data['chats'])} | –∏–Ω—Ç–µ—Ä–≤–∞–ª: {data['interval']//60} –º–∏–Ω | —Å—Ç–∞—Ç—É—Å: {'üü¢' if data['running'] else 'üî¥'}\n"
    await event.reply(text)

@client.on(events.NewMessage(pattern=r'\.b auto (\w+)'))
async def auto_add_chats(event):
    code = event.pattern_match.group(1)
    broadcasts.setdefault(code, {"messages": [], "chats": [], "interval": 60, "running": False})
    existing = {c["chat"] for c in broadcasts[code]["chats"]}

    async for dialog in client.iter_dialogs():
        entity = dialog.entity
        if isinstance(entity, Channel) and entity.megagroup:
            username = f"@{entity.username}" if entity.username else None
            if username and username not in existing:
                broadcasts[code]["chats"].append({"chat": username})
                existing.add(username)
    save_broadcast(code)
    await event.reply(f"‚úÖ –ì—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {code}")

@client.on(events.NewMessage(pattern=r'\.b edit (\w+) (@\w+) (\d+)'))
async def edit_topic(event):
    code, chatname, topic_id = event.pattern_match.groups()
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    updated = False
    for chat in broadcasts[code]["chats"]:
        if chat["chat"] == chatname:
            chat["topic_id"] = int(topic_id)
            updated = True
            break
    if updated:
        save_broadcast(code)
        await event.reply(f"‚úÖ –í {chatname} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω topic_id {topic_id} –¥–ª—è {code}")
    else:
        await event.reply("‚ùó–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ")

@client.on(events.NewMessage(pattern=r'\.b chats (\w+)'))
async def list_chats(event):
    code = event.pattern_match.group(1)
    if code not in broadcasts:
        return await event.reply("‚ùó–ù–µ—Ç —Ç–∞–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    text = f"üìÑ –ß–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ {code}:\n\n"
    for chat in broadcasts[code]["chats"]:
        line = f"üîπ {chat['chat']}"
        if "topic_id" in chat and chat["topic_id"]:
            line += f" üß© (topic_id: {chat['topic_id']})"
        text += line + "\n"
    await event.reply(text)

@client.on(events.NewMessage(pattern=r'\.b commands'))
async def send_commands(event):
    text = """
üìÑ –ö–æ–º–∞–Ω–¥—ã Userbot:

.b a CODE ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫—É
.b r CODE ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
.b ac CODE @chat (topic_id) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç
.b rc CODE @chat ‚Äî —É–¥–∞–ª–∏—Ç—å —á–∞—Ç
.b i CODE min max ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö)
.b s CODE ‚Äî —Å—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
.b x CODE ‚Äî —Å—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∏
.b d CODE ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
.b l ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
.b auto CODE ‚Äî –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø
.b edit CODE @chat topic_id ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å topic_id
.b chats CODE ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
.b commands ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
"""
    await event.reply(text)

# ===== –ó–∞–ø—É—Å–∫ =====
load_broadcasts()

client.start()
print("Bot is running...")
client.run_until_disconnected()
